<?php

/**
 * @file
 * Contains webform redirect implementation.
 */

/**
 * Implements hook_menu().
 */
function webform_redirect_menu() {
  $items['webform-redirect/%ctools_js/rule/delete/%'] = array(
    'page callback' => 'webform_redirect_rule_delete_callback',
    'page arguments' => array(1, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}
function webform_redirect_rule_delete_callback($js, $rule_id) {
  if (!$js) {
    // We don't support degrading this from js because we're not
    // using the server to remember the state of the table.
    return MENU_ACCESS_DENIED;
  }
  ctools_include('ajax');

  $commands = array();
  $commands[] = ctools_ajax_command_remove(".rule-wrapper.rule-$rule_id");
  $commands[] = ctools_ajax_command_restripe("#redirection-settings-wrapper");
  ctools_ajax_render($commands);
}
/**
 * Implementation of hook_nodeapi().
 */
function webform_redirect_nodeapi(&$node, $op, $arg = NULL) {
  if ($node->type == 'webform') {
    switch ($op) {
      case 'load':
        $redirect_settings = db_fetch_object(db_query('SELECT * FROM {webform_redirect} WHERE nid = %d', array($node->nid)));
        if (is_object($redirect_settings)) {
          module_load_include('inc', 'webform_redirect', 'includes/webform_redirect.class');
          $node->conditional_redirect = WebformRedirectItem::create(unserialize($redirect_settings->data));
        }
        break;

      case 'delete':
        db_query('DELETE FROM {webform_redirect} WHERE nid = %d', array($node->nid));
        break;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function webform_redirect_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'webform_configure_form' && !empty($form['submission']['redirection']['redirect']['#options'])) {
    $node = $form['#node'];
    if (empty($node->webform['components'])) {
      return;
    }

    ctools_include('dependent');
    ctools_include('ajax');
    ctools_add_js('ajax-responder');
    drupal_add_css(drupal_get_path('module', 'webform_redirect') . '/css/webform_redirect.css');
    module_load_include('inc', 'webform_redirect', 'includes/webform_redirect.class');

    $options = array();
    foreach ($node->webform['components'] as $cid => $component) {
      $options[$cid] = $component['name'] . ' (' . $component['form_key'] .')';
    }
    if (!empty($options)) {
      $options = array('' => 'Select') + $options;
    }


    /* @var  WebformRedirectItem $conditional_redirect */
    $conditional_redirect = isset($node->conditional_redirect) ? $node->conditional_redirect : NULL;
    $fallback_options = $form['submission']['redirection']['redirect']['#options'];
    $form['submission']['redirection']['redirect']['#options']['conditional'] = t('Conditional redirect');
    $form['submission']['redirection']['conditional'] = array(
      '#type' => 'fieldset',
      '#title' => t('Conditional redirection settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#prefix' => '<div id="redirection-settings-wrapper">',
      '#suffix' => '</div>',
      '#input' => true,
      '#id' => 'redirection-settings',
      '#process' => array('ctools_dependent_process'),
      '#dependency' => array('radio:redirect' => array('conditional')),
      '#tree' => TRUE,
    );
    $redirect_element = &$form['submission']['redirection']['conditional'];
    $redirect_element['default']  = array(
      '#type' => 'fieldset',
      '#title' => t('Default behaviour'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $redirect_element['default']['fallback'] = array(
      '#title' => t('Default'),
      '#description' => t('Default fallback behaviour if none of the below  conditions met.'),
      '#type' => 'select',
      '#options' => $fallback_options,
      '#default_value' => isset($conditional_redirect) ? $conditional_redirect->getDefaultFallback() : NULL,

    );
    $redirect_element['default']['url'] = array(
      '#type' => 'textfield',
      '#title' => t('Redirect URL'),
      '#description' => t('URL to redirect the user to upon successful submission.'),
      '#default_value' => isset($conditional_redirect) ? $conditional_redirect->getDefaultUrl() : NULL,
      '#maxlength' => 255,
      '#process' => array('ctools_dependent_process'),
      '#dependency' => array('edit-conditional-default-fallback' => array('url')),
    );
    $rules_list = isset($conditional_redirect) ? range(0, $conditional_redirect->getRulesCount() + 2) : range(0, 2);

    $redirect_element['rules']  = array(
      '#type' => 'fieldset',
      '#title' => t('Rules'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    foreach ($rules_list as $i) {
      $key = 'redirect_rule_' . $i;
      /** @var WebformRedirectRule $rule */
      $rule = isset($conditional_redirect) ? $conditional_redirect->getRuleById($key) : NULL;
      $redirect_element['rules'][$key] = array(
        '#type' => 'item',
        '#prefix' => '<div class="rule-wrapper rule-' . $i . '">',
        '#suffix' => '</div>',
      );
      $redirect_element['rules'][$key]['field'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => isset($rule) ? $rule->getField() : NULL,
      );
      $redirect_element['rules'][$key]['value'] = array(
        '#type' => 'textfield',
        // '#title' => t('Value'),
        '#maxlength' => 255,
        '#size' => 20,
        '#default_value' => isset($rule) ? $rule->getValue() : NULL,
      );
      $redirect_element['rules'][$key]['destination'] = array(
        '#type' => 'textfield',
        // '#title' => t('URL'),
        '#maxlength' => 255,
        '#default_value' => isset($rule) ? $rule->getUrl() : NULL,
      );
      // Add delete button to first element, only when more than one
      // resident available.
      if ($i > 0) {
        $redirect_element['rules'][$key]['delete_button'] = array(
          '#type' => 'markup',
          '#value' => ctools_ajax_text_button(t('Delete'), "webform-redirect/nojs/rule/delete/$i", t('Delete this row')),
          '#prefix' => '<div class="form-item">',
          '#suffix' => '</div>',
        );
      }
    }
    $redirect_element['rules']['add_button'] = array(
      '#type' => 'submit',
      '#value' => t('Add more rules'),
      '#prefix' => '<div class="clear">',
      '#suffix' => '</div>',
    );
    
    $form['#validate'][] = 'webform_redirect_configure_form_validate';
    $form['#submit'][] = 'webform_redirect_configure_form_submit';
  }
  elseif (strpos($form_id, 'webform_client_form_') === 0) {
    $form['#submit'][] = 'webform_redirect_client_form_submit';
  }
}

/**
 * Validate handler for webform_configure_form().
 */
function webform_redirect_configure_form_validate($form, &$form_state) {
  if ($form_state['values']['redirect'] == 'conditional') {

    // Ensure the entered redirect URL is valid.
    if ($form_state['values']['conditional']['default']['fallback'] == 'url') {
      $redirect_url = $form_state['values']['conditional']['default']['url'];
      webform_redirect_validate_url_element($redirect_url,$form['submission']['redirection']['conditional']['default']['url']);
    }

    // Ensure the entered rules URL is valid.
    foreach ($form_state['values']['conditional']['rules'] as $index => $rule) {
      if (!WebformRedirectRule::isValid($rule)) {
        if (!empty($rule['field'])) {
          // Validate the value for the field.
          if (empty($rule['value'])) {
            form_error($form['submission']['redirection']['conditional']['rules'][$index]['value'], t('Please enter valid value'));
          }
          // Validate the URL.
          webform_redirect_validate_url_element($rule['destination'], $form['submission']['redirection']['conditional']['rules'][$index]['destination']);
        }
        else {
          unset($form_state['values']['conditional']['rules'][$index]);
        }
      }
    }
    form_set_value($form['submission']['redirection']['redirect_url'], '<conditional>', $form_state);
  }

  // Make sure at least one rule is available.
  if (!count($form_state['values']['conditional']['rules'])) {
    form_error($form['submission']['redirection']['conditional']['rules'], t('Please provide at least one rule'));
  }

}

/**
 * Submit handler for webform_configure_form().
 */
function webform_redirect_configure_form_submit($form, &$form_state) {
  // Edit the node by reference just to shorten it up.
  $node = &$form['#node'];
  if ( $form_state['values']['redirect'] == 'conditional') {
    $rules['default'] = array_filter($form_state['values']['conditional']['default']);
    $rules['rules'] = array_values($form_state['values']['conditional']['rules']);
    webform_redirect_configure_form_submit_save($node, $rules);
  }
  elseif(!empty($form_state['values']['conditional'])) {
    // When user change the option, make sure staled settings are  remove from
    // the webform_redirect table.
    $exist = db_result(db_query('SELECT count(nid) FROM {webform_redirect} WHERE nid=%d', array($node->nid)));
    if ($exist) {
      db_query('DELETE FROM {webform_redirect} WHERE nid = %d', array($node->nid));
    }
  }
}

function webform_redirect_configure_form_submit_save($node, $settings) {
  $exist = db_result(db_query('SELECT count(nid) FROM {webform_redirect} WHERE nid=%d', array($node->nid)));
  if ($exist) {
    db_query('UPDATE {webform_redirect} SET  data = "%s" WHERE nid = %d', array(serialize($settings), $node->nid));
  }
  else {
    db_query('INSERT INTO {webform_redirect} (nid, data) VALUES (%d, "%s")', array($node->nid, serialize($settings)));
  }

}

function webform_redirect_client_form_submit($form, &$form_state) {
  // Edit the node by reference just to shorten it up.
  $node = $form['#node'];
  $redirect_url = trim($node->webform['redirect_url']);
  if ($redirect_url == '<conditional>') {
    $sid = $form_state['values']['details']['sid'] ? (int) $form_state['values']['details']['sid'] : NULL;
    $values = $form_state['values'];
    $redirect = NULL;
    /** @var  WebformRedirectItem $conditional_redirect */
    $conditional_redirect = $node->conditional_redirect;
    foreach ($conditional_redirect->getRules() as $key => $rule) {
      $submitted = $values['submitted'][$rule->getField()];
      if ($rule->getValue() == $submitted || (is_array($submitted) && in_array($rule->getValue(), $submitted))) {
        $redirect_url = $rule->getUrl();
        $redirect_url = webform_redirect_clean_redirect_url($redirect_url, $node, $sid);

        if (valid_url($redirect_url, TRUE)) {
          $redirect = $redirect_url;
        }
        elseif ($redirect_url) {
          $redirect = $redirect_url;
        }
        break;
      }
    }

    // No condition matched. Fallback to default.
    if (!$redirect) {
      $redirect = webform_redirect_client_get_fallback_redirect($node, $sid);
    }

    $form_state['redirect'] = $redirect;
  }
}

function webform_redirect_validate_url_element($url, $element) {
  if (empty($url)) {
    form_error($element, t('A valid URL is required.'));
  }
  elseif (strpos($url, 'http') === 0 && !valid_url($url, TRUE)) {
    form_error($element, t('The entered URL is not a valid address.'));
  }
}

function webform_redirect_clean_redirect_url($url, $node, $sid) {
  // As this module handles the core webform functionality, we have to do
  // make sure it behaves the same way as webform.
  $submission = webform_get_submission($node->webform['nid'], $sid, TRUE);
  $url = _webform_filter_values(trim($url), $node, $submission, NULL, FALSE, TRUE);

  // Remove the domain name from the redirect.
  $url = preg_replace('/^' . preg_quote($GLOBALS['base_url'], '/') . '\//', '', $url);
  return $url;
}

function webform_redirect_client_get_fallback_redirect($node, $sid) {
  /* @var  WebformRedirectItem $conditional_redirect */
  $conditional_redirect = $node->conditional_redirect;
  $fallback = $conditional_redirect->getDefaultFallback();
  $redirect_url = $conditional_redirect->getDefaultUrl();
  $redirect_url = webform_redirect_clean_redirect_url($redirect_url, $node, $sid);

  $redirect = NULL;
  // Default fallback.
  if ($fallback == '<none>') {
    $redirect = NULL;
  }
  elseif ($fallback== '<confirmation>') {
    $redirect = array('node/' . $node->nid . '/done', 'sid=' . $sid);
  }
  elseif (valid_url($redirect_url, TRUE)) {
    $redirect = $redirect_url;
  }
  elseif ($redirect_url && strpos($redirect_url, 'http') !== 0) {
    $parts = parse_url($redirect_url);
    $query = $parts['query'] ? ($parts['query'] . '&sid=' . $sid) : ('sid=' . $sid);
    $redirect = array($parts['path'], $query, $parts['fragment']);
  }
  return $redirect;
}

/**
 * Theme the redirection setting on the webform node form.
 */
function webform_redirect_conditional_elements($form) {
  $form['redirect_field']['#title'] = NULL;
  $form['#title'] = $form['#title'] . ' <strong>Field: </strong>';
  return drupal_render($form);
}